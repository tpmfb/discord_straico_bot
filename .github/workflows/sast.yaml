name: Python SAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write   # Required for GitHub Security tab

jobs:
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    continue-on-error: true   # âœ… still allows merge

    steps:
      # --- Checkout repo ---
      - uses: actions/checkout@v4

      # --- Setup Python ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- Install Bandit and Semgrep ---
      - name: Install SAST tools
        run: |
          pip install bandit semgrep

      # --- Run Bandit (with guaranteed SARIF creation) ---
      - name: Run Bandit
        run: |
          bandit -r . -ll -f json -o bandit-report.json || true

          python3 - <<'EOF'
          import json, pathlib
          src = pathlib.Path("bandit-report.json")
          sarif_path = pathlib.Path("bandit-report.sarif")
          if not src.exists() or src.stat().st_size == 0:
              sarif_path.write_text('{"version":"2.1.0","runs":[]}')
          else:
              data = json.load(src.open())
              sarif = {
                  "version": "2.1.0",
                  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                  "runs": [{
                      "tool": {"driver": {"name": "Bandit"}},
                      "results": [{
                          "ruleId": i.get("test_id"),
                          "level": i.get("issue_severity", "note").lower(),
                          "message": {"text": i.get("issue_text")},
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {"uri": i.get("filename")},
                                  "region": {"startLine": i.get("line_number", 1)}
                              }
                          }]
                      } for i in data.get("results", [])]
                  }]
              }
              sarif_path.write_text(json.dumps(sarif, indent=2))
          EOF

      # --- Run Semgrep (with guaranteed SARIF creation) ---
      - name: Run Semgrep
        run: |
          semgrep scan --config=auto --json > semgrep-report.json || true

          # Create SARIF safely
          semgrep scan --config=auto --sarif-output semgrep-report.sarif || true

          # If SARIF not created, make empty one
          if [ ! -f semgrep-report.sarif ]; then
            echo '{"version":"2.1.0","runs":[]}' > semgrep-report.sarif
          fi

      # --- Show Bandit summary ---
      - name: Show Bandit summary
        if: always()
        run: |
          python3 - <<'EOF'
          import json, pathlib
          f = pathlib.Path('bandit-report.json')
          if f.exists() and f.stat().st_size > 0:
              data = json.load(f.open())
              print("\n=== Bandit Findings Summary ===")
              for issue in data.get('results', []):
                  print(f"{issue['filename']}:{issue['line_number']} -> {issue['issue_severity']} - {issue['issue_text']}")
          else:
              print("No Bandit findings or empty report.")
          EOF

      # --- Upload reports as artifacts ---
      - name: Upload SAST reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            semgrep-report.json
            bandit-report.sarif
            semgrep-report.sarif

      # --- Upload to GitHub Security tab ---
      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            bandit-report.sarif
            semgrep-report.sarif
